generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL") // ...?schema=users
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  avatarUrl String?
  score     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  groupsLed   Group[]      @relation("LeaderGroups") // aggiunto
  memberships Membership[]
}

model Group {
  id        String        @id @default(cuid())
  name      String
  leaderId  String
  leader    User          @relation("LeaderGroups", fields: [leaderId], references: [id])
  members   Membership[]
  questions QuestionRef[]
  invites   Invite[]
  joinCode  String?       @unique // codice di ingresso

  themes String[] @default([]) // lista di stringhe
}

model Membership {
  id      String @id @default(uuid())
  userId  String
  groupId String
  role    String @default("member")

  user  User  @relation(fields: [userId], references: [id])
  group Group @relation(fields: [groupId], references: [id])

  @@unique([userId, groupId])
  @@index([groupId])
}

model QuestionRef {
  id        String   @id
  groupId   String
  createdAt DateTime @default(now())
  Group     Group    @relation(fields: [groupId], references: [id])
  theme     String? // singola stringa opzionale

  @@index([groupId])
}

model Invite {
  id              String    @id @default(uuid())
  groupId         String
  code            String    @unique
  email           String? // se invito mirato a una mail specifica
  createdByUserId String
  expiresAt       DateTime
  usedByUserId    String?
  usedAt          DateTime?
  createdAt       DateTime  @default(now())

  group Group @relation(fields: [groupId], references: [id])

  @@index([groupId])
  @@index([code])
}
